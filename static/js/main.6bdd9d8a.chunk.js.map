{"version":3,"sources":["BarChart.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","createClassFromSpec","spec","width","height","data","name","signals","value","on","events","update","scales","type","domain","field","range","nice","axes","orient","scale","marks","from","encode","enter","x","offset","band","y","y2","fill","hover","align","baseline","signal","text","fillOpacity","test","barData","table","category","amount","signalListeners","tooltip","args","console","log","App","style","margin","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8LA8EeA,EAJEC,YAAoB,CACnCC,KAzEW,CACXC,MAAO,IACPC,OAAQ,IACRC,KAAM,CAAC,CAAEC,KAAM,UACfC,QAAS,CACP,CACED,KAAM,UACNE,MAAO,GACPC,GAAI,CACF,CAAEC,OAAQ,iBAAkBC,OAAQ,SACpC,CAAED,OAAQ,gBAAiBC,OAAQ,SAIzCC,OAAQ,CACN,CACEN,KAAM,SACNO,KAAM,OACNC,OAAQ,CAAET,KAAM,QAASU,MAAO,YAChCC,MAAO,SAET,CACEV,KAAM,SACNQ,OAAQ,CAAET,KAAM,QAASU,MAAO,UAChCE,MAAM,EACND,MAAO,WAIXE,KAAM,CACJ,CAAEC,OAAQ,SAAUC,MAAO,UAC3B,CAAED,OAAQ,OAAQC,MAAO,WAG3BC,MAAO,CACL,CACER,KAAM,OACNS,KAAM,CAAEjB,KAAM,SACdkB,OAAQ,CACNC,MAAO,CACLC,EAAG,CAAEL,MAAO,SAAUL,MAAO,WAAYW,OAAQ,GACjDvB,MAAO,CAAEiB,MAAO,SAAUO,KAAM,EAAGD,QAAS,GAC5CE,EAAG,CAAER,MAAO,SAAUL,MAAO,UAC7Bc,GAAI,CAAET,MAAO,SAAUZ,MAAO,IAEhCG,OAAQ,CACNmB,KAAM,CAAEtB,MAAO,cAEjBuB,MAAO,CACLD,KAAM,CAAEtB,MAAO,UAIrB,CACEK,KAAM,OACNU,OAAQ,CACNC,MAAO,CACLQ,MAAO,CAAExB,MAAO,UAChByB,SAAU,CAAEzB,MAAO,UACnBsB,KAAM,CAAEtB,MAAO,SAEjBG,OAAQ,CACNc,EAAG,CAAEL,MAAO,SAAUc,OAAQ,mBAAoBP,KAAM,IACxDC,EAAG,CAAER,MAAO,SAAUc,OAAQ,iBAAkBR,QAAS,GACzDS,KAAM,CAAED,OAAQ,kBAChBE,YAAa,CAAC,CAAEC,KAAM,oBAAqB7B,MAAO,GAAK,CAAEA,MAAO,WChEpE8B,EAAU,CACdC,MAAO,CACL,CAAEC,SAAU,IAAKC,OAAQ,IACzB,CAAED,SAAU,IAAKC,OAAQ,IACzB,CAAED,SAAU,IAAKC,OAAQ,IACzB,CAAED,SAAU,IAAKC,OAAQ,IACzB,CAAED,SAAU,IAAKC,OAAQ,IACzB,CAAED,SAAU,IAAKC,OAAQ,IACzB,CAAED,SAAU,IAAKC,OAAQ,IACzB,CAAED,SAAU,IAAKC,OAAQ,MAO7B,IAAMC,EAAkB,CAAEC,QAH1B,WAA+B,IAAD,uBAANC,EAAM,yBAANA,EAAM,gBAC5BC,QAAQC,IAAIF,KAIC,SAASG,IACtB,OACE,yBAAKC,MAAO,CAAEC,OAAQ,sBAAuBC,SAAU,MACrD,kBAAC,EAAD,CAAU7C,KAAMiC,EAASI,gBAAiBA,KCZ5BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACX,EAAD,OAEFY,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.6bdd9d8a.chunk.js","sourcesContent":["import { createClassFromSpec } from \"react-vega\";\n\nconst spec = {\n  width: 960,\n  height: 500,\n  data: [{ name: \"table\" }],\n  signals: [\n    {\n      name: \"tooltip\",\n      value: {},\n      on: [\n        { events: \"rect:mouseover\", update: \"datum\" },\n        { events: \"rect:mouseout\", update: \"{}\" },\n      ],\n    },\n  ],\n  scales: [\n    {\n      name: \"xscale\",\n      type: \"band\",\n      domain: { data: \"table\", field: \"category\" },\n      range: \"width\",\n    },\n    {\n      name: \"yscale\",\n      domain: { data: \"table\", field: \"amount\" },\n      nice: true,\n      range: \"height\",\n    },\n  ],\n\n  axes: [\n    { orient: \"bottom\", scale: \"xscale\" },\n    { orient: \"left\", scale: \"yscale\" },\n  ],\n\n  marks: [\n    {\n      type: \"rect\",\n      from: { data: \"table\" },\n      encode: {\n        enter: {\n          x: { scale: \"xscale\", field: \"category\", offset: 1 },\n          width: { scale: \"xscale\", band: 1, offset: -1 },\n          y: { scale: \"yscale\", field: \"amount\" },\n          y2: { scale: \"yscale\", value: 0 },\n        },\n        update: {\n          fill: { value: \"steelblue\" },\n        },\n        hover: {\n          fill: { value: \"red\" },\n        },\n      },\n    },\n    {\n      type: \"text\",\n      encode: {\n        enter: {\n          align: { value: \"center\" },\n          baseline: { value: \"bottom\" },\n          fill: { value: \"#333\" },\n        },\n        update: {\n          x: { scale: \"xscale\", signal: \"tooltip.category\", band: 0.5 },\n          y: { scale: \"yscale\", signal: \"tooltip.amount\", offset: -2 },\n          text: { signal: \"tooltip.amount\" },\n          fillOpacity: [{ test: \"datum === tooltip\", value: 0 }, { value: 1 }],\n        },\n      },\n    },\n  ],\n};\n\nconst BarChart = createClassFromSpec({\n  spec,\n});\n\nexport default BarChart;\n","import React from \"react\";\nimport BarChart from \"./BarChart.js\";\n\nconst barData = {\n  table: [\n    { category: \"A\", amount: 28 },\n    { category: \"B\", amount: 55 },\n    { category: \"C\", amount: 43 },\n    { category: \"D\", amount: 91 },\n    { category: \"E\", amount: 81 },\n    { category: \"F\", amount: 53 },\n    { category: \"G\", amount: 19 },\n    { category: \"H\", amount: 89 },\n  ],\n};\n\nfunction handleHover(...args) {\n  console.log(args);\n}\nconst signalListeners = { tooltip: handleHover };\n\nexport default function App() {\n  return (\n    <div style={{ margin: \"100px auto 0px auto\", maxWidth: 960 }}>\n      <BarChart data={barData} signalListeners={signalListeners} />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}